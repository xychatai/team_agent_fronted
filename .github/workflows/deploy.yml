name: Deploy to Docker

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: xychatai/team-fronted

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies (optional)
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install
            fi
          else
            echo "No package.json, skipping npm install"
          fi

      - name: Build (static frontend)
        run: |
          if [ -f package.json ]; then
            npm run build || echo "No build needed"
          else
            echo "No package.json, skipping build"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update production branch (if production/ exists)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # If there's no production directory, skip gracefully
          if [ ! -d "production" ]; then
            echo "No production directory found; skipping production branch update."
            exit 0
          fi

          # Git config
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Temp dirs
          TEMP_DIR=$(mktemp -d)
          REPO_DIR=$(mktemp -d)
          echo "Using temp dir: $TEMP_DIR"
          echo "Using repo dir: $REPO_DIR"

          # Copy production contents (include dotfiles)
          cp -r production/. "$TEMP_DIR/"

          # Add deploy info
          echo "# 部署信息" > "$TEMP_DIR/DEPLOY_INFO.md"
          echo "- 构建时间: $(date)" >> "$TEMP_DIR/DEPLOY_INFO.md"
          echo "- Docker镜像: ${{ env.IMAGE_NAME }}:latest" >> "$TEMP_DIR/DEPLOY_INFO.md"
          echo "- Git提交: ${{ github.sha }}" >> "$TEMP_DIR/DEPLOY_INFO.md"

          # Clone same repo and prepare production branch
          git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}" "$REPO_DIR"
          cd "$REPO_DIR"

          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          # Create or reset production branch
          git checkout --orphan production || git checkout -B production

          # Clear existing files
          git rm -rf . 2>/dev/null || true

          # Copy new contents
          cp -r "$TEMP_DIR"/* .

          # Commit and push
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update production deployment - $(date)

            Docker镜像: ${{ env.IMAGE_NAME }}:latest
            源代码提交: ${{ github.sha }}"
            git push -f origin production
            echo "Successfully updated production branch"
          fi

          # Cleanup
          rm -rf "$TEMP_DIR" "$REPO_DIR"

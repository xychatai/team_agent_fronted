name: Deploy to Docker

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: xychatai/team-fronted

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Node.js/前端构建步骤已移除：本仓库无需 Node 依赖与构建

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Manage deployment branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # If there's no production directory, skip gracefully
          if [ ! -d "production" ]; then
            echo "No production directory found; skipping deployment branch management."
            exit 0
          fi

          # Git config
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if remote branches exist
          git fetch origin

          # Check if production branch exists
          PRODUCTION_EXISTS=$(git ls-remote --heads origin production | wc -l)
          echo "Production branch exists: $PRODUCTION_EXISTS"

          # Check if deploy branch exists  
          DEPLOY_EXISTS=$(git ls-remote --heads origin deploy | wc -l)
          echo "Deploy branch exists: $DEPLOY_EXISTS"

          # Temp dirs
          TEMP_DIR=$(mktemp -d)
          REPO_DIR=$(mktemp -d)
          echo "Using temp dir: $TEMP_DIR"
          echo "Using repo dir: $REPO_DIR"

          # Copy production contents (include dotfiles)
          cp -r production/. "$TEMP_DIR/"

          # Add deploy info
          echo "# 部署信息" > "$TEMP_DIR/DEPLOY_INFO.md"
          echo "- 构建时间: $(date)" >> "$TEMP_DIR/DEPLOY_INFO.md"
          echo "- Docker镜像: ${{ env.IMAGE_NAME }}:latest" >> "$TEMP_DIR/DEPLOY_INFO.md"
          echo "- Git提交: ${{ github.sha }}" >> "$TEMP_DIR/DEPLOY_INFO.md"

          # Clone same repo for branch operations
          git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}" "$REPO_DIR"
          cd "$REPO_DIR"

          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          # Function to create/update branch
          create_or_update_branch() {
            local branch_name=$1
            local should_create=$2
            
            if [ "$should_create" = "1" ]; then
              echo "Creating/updating $branch_name branch..."
              
              # Create or reset branch
              git checkout --orphan "$branch_name" 2>/dev/null || git checkout -B "$branch_name"

              # Clear existing files
              git rm -rf . 2>/dev/null || true

              # Copy new contents
              cp -r "$TEMP_DIR"/* . 2>/dev/null || true
              cp -r "$TEMP_DIR"/.[^.]* . 2>/dev/null || true

              # Commit and push
              git add .
              if git diff --cached --quiet; then
                echo "No changes to commit to $branch_name"
              else
                git commit -m "Auto-update $branch_name deployment - $(date)

                Docker镜像: ${{ env.IMAGE_NAME }}:latest
                源代码提交: ${{ github.sha }}"
                git push -f origin "$branch_name"
                echo "Successfully updated $branch_name branch"
              fi
            else
              echo "$branch_name branch already exists, skipping creation"
            fi
          }

          # Handle production branch
          if [ "$PRODUCTION_EXISTS" = "0" ]; then
            create_or_update_branch "production" "1"
          else
            echo "Production branch already exists, skipping creation"
          fi

          # Handle deploy branch
          if [ "$DEPLOY_EXISTS" = "0" ]; then
            create_or_update_branch "deploy" "1"
          else
            echo "Deploy branch already exists, skipping creation"
          fi

          # Cleanup
          rm -rf "$TEMP_DIR" "$REPO_DIR"
